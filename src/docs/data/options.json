[
    {
        "name": "allowDuplicates",
        "description": "When true, the same tag can be added multiple times.",
        "type": "Boolean",
        "value": "false"
    },
    {
        "name": "caseSensitive",
        "description": "When true, duplicate tags value check is case sensitive.",
        "type": "Boolean",
        "value": "true"
    },
    {
        "name": "clearSelectionOnTyping",
        "description": "When true, tags will be unselected when new tag is entered.",
        "type": "Boolean",
        "value": "false"
    },
    {
        "name": "closeDropdownOnItemSelect",
        "description": "When true, datalist will close automatically after an item have been selected.",
        "type": "Boolean",
        "value": "true"
    },
    {
        "name": "delimiter",
        "description": "Multiple tags can be added at once. Delimiter is used to separate all tags. ",
        "type": "String",
        "value": ","
    },
    {
        "name": "freeInput",
        "description": "When true, tags can be entered manually. This option is useful with select Tags inputs. Set to false automatically when using on select element.",
        "type": "Boolean",
        "value": "true"
    },
    {
        "name": "highlightDuplicate",
        "description": "When true, if `allowDuplicates` option if false then the already existing tag will be temporarly and visually identified as duplicate ",
        "type": "Boolean",
        "value": "true"
    },
    {
        "name": "highlightMatchesString",
        "description": "When true, identified matches strings when searching is highlighted.",
        "type": "Boolean",
        "value": "true"
    },
    {
        "name": "itemText",
        "description": "When adding objects as tags, you can set itemText to the name of the property of item to use for a its tag's text. When this options is not set, the value of _itemValue_ will be used.",
        "type": "String",
        "value": "undefined"
    },
    {
        "name": "itemValue",
        "description": "When adding objects as tags, itemValue must be set to the name of the property containing the item's value.",
        "type": "String",
        "value": "undefined"
    },
    {
        "name": "maxTags",
        "description": "When set, no more than the given number of tags are allowed to add.",
        "type": "Integer",
        "value": "undefined"
    },
    {
        "name": "maxChars",
        "description": "Defines the maximum length of a single tag.",
        "type": "Integer",
        "value": "undefined"
    },
    {
        "name": "minChars",
        "description": "Defines the minimum length of a single tag.",
        "type": "Integer",
        "value": "1"
    },
    {
        "name": "noResultsLabel",
        "description": "Empty dropdown label.",
        "type": "String",
        "value": "No results found"
    },
    {
        "name": "placeholder",
        "description": "TagsInput placeholder text if original input doesn't have one.",
        "type": "String",
        "value": "undefined"
    },
    {
        "name": "removable",
        "description": "When true, tags are removable either using the associted delete button or _backspace_ and _delete_ keys.",
        "type": "Boolean",
        "value": "true"
    },
    {
        "name": "searchMinChars",
        "description": "Defines the minimum length of input value before loading auto-complete.",
        "type": "Integer",
        "value": "1"
    },
    {
        "name": "searchOn",
        "description": "Defines on what dropdown item data do we search the entered value. Possible value: 'value' or 'text'.",
        "type": "String",
        "value": "text"
    },
    {
        "name": "selectable",
        "description": "When true, tags can be selected either by mouse click or using _left_ or _right_ arrow keys.",
        "type": "Boolean",
        "value": "true"
    },
    {
        "name": "source",
        "description": "Source of data proposed in dropdown (used for auto-complete).",
        "type": "Can be one of the following types:\n* `Array` of `Strings` / `Objects`\n* `Function` => `Array` of `Strings` / `Objects`\n* `Promise` => `Array` of `Strings` / `Objects`.",
        "value": "undefined"
    },
    {
        "name": "tagClass",
        "description": "Classname applied to each tag.",
        "type": "String",
        "value": "is-rounded"
    },
    {
        "name": "trim",
        "description": "When true, automatically removes all whitespace around tags.",
        "type": "Boolean",
        "value": "true"
    }
]
